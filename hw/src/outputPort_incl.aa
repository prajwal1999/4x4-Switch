$module [ ##OUTPUTPORTDAEMON ] $in () $out () $is
{
    $branchblock[loop] {
        $dopipeline $depth OUTPUT_PORT_PIPELINE_DEPTH $fullrate

            $merge $entry $loopback
                // how to many words left to read - down_counter
                $phi down_counter := ZERO_8 $on $entry next_down_counter $on $loopback

                // pkt_1_e_word - word that will be read from input queue 1 "now, We may not read 
                $phi pkt_1_e_word := ZERO_33 $on $entry 
                    $guard (read_from_1) ##NOBLOCKOBUF_FROM_1 $on $loopback
                $phi pkt_2_e_word := ZERO_33 $on $entry 
                    $guard (read_from_2) ##NOBLOCKOBUF_FROM_2 $on $loopback
                $phi pkt_3_e_word := ZERO_33 $on $entry 
                    $guard (read_from_3) ##NOBLOCKOBUF_FROM_3 $on $loopback
                $phi pkt_4_e_word := ZERO_33 $on $entry 
                    $guard (read_from_4) ##NOBLOCKOBUF_FROM_4 $on $loopback

                // active_packet - packet number being sent out
                $phi active_packet := ZERO_3 $on $entry next_active_packet $on $loopback
                $phi priority_pkt := ZERO_3 $on $entry next_priority_pkt $on $loopback

                //$phi active_packet := ZERO_2 $on $entry next_active_packet $on $loopback
                //$phi pkt_1_has_priority := ZERO_1 $on $entry next_pkt_1_has_priority $on $loopback
            $endmerge

            $volatile p1_valid := (pkt_1_e_word [] 32)
			$volatile p2_valid := (pkt_2_e_word [] 32)
			$volatile p3_valid := (pkt_3_e_word [] 32)
			$volatile p4_valid := (pkt_4_e_word [] 32)

            $rreport ( ##OUTPUTPORTDAEMON state_summary 
                        read_from_1 pkt_1_e_word
                        read_from_2 pkt_2_e_word
                        read_from_3 pkt_3_e_word
                        read_from_4 pkt_4_e_word
                    )

            $volatile valid_active_pkt_word_read := ($excmux 
					(active_packet == 1) p1_valid
					(active_packet == 2) p2_valid
                    (active_packet == 3) p3_valid
                    (active_packet == 4) p4_valid
                    )

            // priority select function
            $volatile $call prioritySelect 
					    (down_counter active_packet priority_pkt p1_valid p2_valid p3_valid p4_valid)
                        (next_active_packet next_priority_pkt)

            $volatile started_new_packet := (next_active_packet != 0)

            $volatile next_down_counter := ($mux 
                    started_new_packet 63
					($mux valid_active_pkt_word_read (down_counter - 1) down_counter)
                )

            $volatile read_from_1 := ( $reduce | (~p1_valid) (active_packet == 1) )
            $volatile read_from_2 := ( $reduce | (~p2_valid) (active_packet == 2) )
            $volatile read_from_3 := ( $reduce | (~p3_valid) (active_packet == 3) )
            $volatile read_from_4 := ( $reduce | (~p4_valid) (active_packet == 4) )
            
            // send to output port.
			$volatile data_to_out := ($excmux 
                    (next_active_packet == 1) ($slice pkt_1_e_word 31 0)
                    (next_active_packet == 2) ($slice pkt_2_e_word 31 0)
                    (next_active_packet == 3) ($slice pkt_3_e_word 31 0)
                    (next_active_packet == 4) ($slice pkt_4_e_word 31 0)
                )

			// whether to actually send the data or not we must have valid data before.
			$volatile send_flag := ($excmux 
							(next_active_packet == 1) p1_valid 
							(next_active_packet == 2) p2_valid 
                            (next_active_packet == 3) p3_valid
                            (next_active_packet == 4) p4_valid
                        )

            // send if valid
			$guard (send_flag)
				##OUTPUT_PORT := data_to_out

        $while 1
    }
}