$volatile $module [prioritySelect]
    $in (down_counter: $uint<16> 
        active_packet priority_queue: $uint<3>
        p1_valid p2_valid p3_valid p4_valid: $uint<1>)
    $out (next_active_packet next_priority_queue: $uint<3>)
$is
{
    // if down_counter is zero then decide new active packet
	d0 := (down_counter == 0)

    select_1 := ($reduce & d0 p1_valid
            ( (priority_queue == 1) | ( $reduce & (~p2_valid) (~p3_valid) (~p4_valid) ) )
        )

    select_2 := ($reduce & d0 p2_valid 
        ( (priority_queue == 2) | ( $reduce & (~p1_valid) (~p3_valid) (~p4_valid) ) )
    )

    select_3 := ($reduce & d0 p3_valid
        ( (priority_queue == 3) | ( $reduce & (~p1_valid) (~p2_valid) (~p4_valid) ) )
    )

    select_4 := ($reduce & d0 p4_valid 
        ( (priority_queue == 4) | ( $reduce & (~p1_valid) (~p2_valid) (~p3_valid) ) )
    )



    next_active_packet := ($excmux 
                    (~d0)    active_packet
					select_1 1
					select_2 2
					select_3 3
					select_4 4
            )

    // temporary priority rotates on every selection, we may not pass it to next_priority_queue if select is not done.
    $volatile temp_next_priority_queue := ($excmux 
                (priority_queue == 0) 1
                (priority_queue == 1) 2
                (priority_queue == 2) 3
                (priority_queue == 3) 4
                (priority_queue == 4) 1
            )
    
    $volatile is_select_done := ($reduce | select_1 select_2 select_3 select_4)

    next_priority_queue := ($mux
                is_select_done temp_next_priority_queue priority_queue
    )

    $$rreport(
        prioritySelect_function
        d0
        select_1 select_2 select_3 select_4
        next_active_packet
        priority_queue
        temp_next_priority_queue
        is_select_done
        next_priority_queue

    )
}
